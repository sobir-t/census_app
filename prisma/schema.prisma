// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                Int     @id @default(autoincrement())
  // id                Int  @id @default(uuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                 Int         @id @default(autoincrement())
  // id                 String    @id @default(uuid())
  name               String
  email              String      @unique
  image              String
  password           String
  role               UserRole    @default(USER)
  accounts           Account[]
  isTwoFactorEnabled Boolean     @default(false)
  addressId          Int?
  address            Address?    @relation(fields: [addressId], references: [id], onDelete: NoAction)
  Relatives          Relatives[]
}

enum State {
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  DC
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
}

model Address {
  id       Int       @id @default(autoincrement())
  address1 String
  address2 String?
  city     String
  state    State
  zip      String    @db.VarChar(5)
  Records  Records[]
  Users    User[]
}

model Records {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  dob       DateTime
  ssn       String   @db.VarChar(9)
  addressId Int
  address   Address  @relation(fields: [addressId], references: [id], onDelete: NoAction)
}

enum Relationship {
  SELF
  SPOUSE
  CHILD
  PARENT
  GRANDPARENT
  GRANDCHILD
  CUSINE
  AUNT
  UNCLE
  NEPHEW
}

model Relatives {
  id           Int          @id @default(autoincrement())
  userId       Int
  relationship Relationship
  target       Int
  User         User         @relation(fields: [userId], references: [id])
}
